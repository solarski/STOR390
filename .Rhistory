install.packages('tidyverse')
install.packages('rtweet')
install.packages('rvest')
install.packages('shiny')
runExample("01_hello")
if (!require('shiny')) install.packages("shiny")
runExample("01_hello")
library(shiny)
color_list <- list(red = c("tomato", "violetred", "firebrick"),
green = c("chartreuse", "forestgreen", "olivedrab"),
blue = c("navy", "dodgerblue", "torquoise"))
ui <- fluidPage(
radioButtons(inputId = "color_family",
label = "Choose a color family",
choices = c("red", "green", "blue")),
uiOutput(outputId = "color_selector"),
verbatimTextOutput(outputId = "color_chosen")
)
server <- function(input, output) {
output$color_selector <- renderUI({
selectInput(inputId = "color",
label = "Select color",
choices = color_list[input$color_family])
})
output$color_chosen <- renderText({
paste("You chose this color:", input$color)
})
}
shinyApp(ui = ui, server = server,
options = list(height = 300))
library(rvest)
library(stringr)
library(rvest)
library(stringr)
library(tidyverse)
nyt_url <- "https://www.nytimes.com/"
html <- read_html(nyt_url)
selector <- ".story-heading"
# some code to get articles titles
article_titles <- html_nodes(selector) %>% html_text()
article_titles <- html %>% html_nodes(selector) %>% html_text()
article_titles[1:10]
install.packages('rtweet')
consumer_key <- "00eRwXAofHfOi3VLoMpqle73k"
consumer_secret <- "Nkm0CGxjtgwFuwYO3BpVTpFS8WaltzG7iEzvydrLYEzyfv2qSu"
appname <- 'stor390scraper'
twitter_token <- create_token(app = appname,
consumer_key = consumer_key,
consumer_secret = consumer_secret)
library(rtweet)
consumer_key <- "00eRwXAofHfOi3VLoMpqle73k"
consumer_secret <- "Nkm0CGxjtgwFuwYO3BpVTpFS8WaltzG7iEzvydrLYEzyfv2qSu"
appname <- 'stor390scraper'
twitter_token <- create_token(app = appname,
consumer_key = consumer_key,
consumer_secret = consumer_secret)
consumer_key <- "00eRwXAofHfOi3VLoMpqle73k"
consumer_secret <- "Nkm0CGxjtgwFuwYO3BpVTpFS8WaltzG7iEzvydrLYEzyfv2qSu"
appname <- 'stor390scraper'
twitter_token <- create_token(app = appname,
consumer_key = consumer_key,
consumer_secret = consumer_secret)
handle <- "hadleywickham"
search_results <- get_timeline(handle)$text[1:100]
search_results[1]
search_results[2]
str_count(search_results, "data")
str_detect(search_results, "data")
consumer_key <- "00eRwXAofHfOi3VLoMpqle73k"
consumer_secret <- "Nkm0CGxjtgwFuwYO3BpVTpFS8WaltzG7iEzvydrLYEzyfv2qSu"
appname <- 'stor390scraper'
twitter_token <- create_token(app = appname,
consumer_key = consumer_key,
consumer_secret = consumer_secret)
handle <- "hadleywickham"
search_results <- get_timeline(handle)$text[1:100]
search_query <- "data"
count <- sum(str_detect(search_results, search_query))
count
str_count("data data", "data")
consumer_key <- "00eRwXAofHfOi3VLoMpqle73k"
consumer_secret <- "Nkm0CGxjtgwFuwYO3BpVTpFS8WaltzG7iEzvydrLYEzyfv2qSu"
appname <- 'stor390scraper'
twitter_token <- create_token(app = appname,
consumer_key = consumer_key,
consumer_secret = consumer_secret)
handle <- "hadleywickham"
search_results <- get_timeline(handle)$text[1:100]
search_query <- "(d|D)ata"
count <- sum(str_detect(search_results, search_query))
count
library(jsonlite)
library(stringr)
library(tidyverse)
library(readr)
data <- read_csv("guardian_data.csv")
# read in data
# completeData <- read_csv('completeData.csv')
row_to_url <- function(row){
# set the URL base
basestring = "https://www.broadbandmap.gov/broadbandmap/census/tract?"
endstring = "&format=json"
x = paste0("latitude=", row$lat)
y = paste0("&", "longitude=", row$long)
# create url string from base, coordinate, and end parts
urlstring = paste0(basestring, x, y, endstring)
return(urlstring)
}
row_to_url(data[5, ])
url_1 = row_to_url(data[1, ])
url_1
#We can use the `readLines( )` function to retrieve data from the API by calling `readLines(aURL)`.
dat = readLines(url_1)
dat
#The value `dat` is in string format, we use the `jsonlite` to package to convert.
datdf = fromJSON(dat)
datdf
#The Results can be accessed as follows.
datdf$Results$censusTract
#Fips
datdf$Results$censusTract$fips
#And there appears to be a useful location type field here.
#datdf$results$geometry$location_type
get_and_parse <- function(urlstring) {
dat = readLines(urlstring)
datdf = fromJSON(dat)
return(datdf)
}
add_row <- function(df, jsndat, reqdat) {
# expects df to have columns [street, city, state, lat, lon, loctype]
# req dat is a row of data used for request [street, city, state]
resdf = data.frame(
name = reqdat$name,
age =  reqdat$age,
gender = reqdat$gender,
raceethnicity = reqdat$raceethnicity,
month = reqdat$month,
day = reqdat$day,
year = reqdat$year,
streetaddress = reqdat$streetaddress,
city = reqdat$city,
state = reqdat$state,
classification = reqdat$classification,
lawenforcementagency = reqdat$lawenforcementagency,
disposition = reqdat$disposition,
lat = reqdat$lat,
long = reqdat$long,
armed = reqdat$armed,
state_fp = jsndat$Results$censusTract$stateFips,
geo_id = jsndat$Results$censusTract$fips,
census_tract = jsndat$Results$censusTract$name
)
return(rbind(df, resdf))
}
map_data <- function(df) {
# expects df to have columns [street, city, state]
# initialize a dataframe with appropriate columns using the first row of
# our request data
reqrow = df[1,]
print(reqrow)
qryurl = row_to_url(reqrow)
print(qryurl)
jsndf = get_and_parse(qryurl)
print(jsndf)
newdf = data.frame(
name = reqrow$name,
age =  reqrow$age,
gender = reqrow$gender,
raceethnicity = reqrow$raceethnicity,
month = reqrow$month,
day = reqrow$day,
year = reqrow$year,
streetaddress = reqrow$streetaddress,
city = reqrow$city,
state = reqrow$state,
classification = reqrow$classification,
lawenforcementagency = reqrow$lawenforcementagency,
disposition = reqrow$disposition,
lat = reqrow$lat,
long = reqrow$long,
armed = reqrow$armed,
state_fp = jsndf$Results$censusTract$stateFips,
geo_id = jsndf$Results$censusTract$fips,
census_tract = jsndf$Results$censusTract$name
)
# populate the dataframe with the rest of the request data
for (ix in 2:nrow(df)) {
tryCatch({
reqrow = df[ix, c("name","age","gender","raceethnicity","month","day","year","streetaddress","city","state",
"classification","lawenforcementagency","disposition","lat","long","armed" )]
if (!is.null(reqrow[15]) | !is.null(reqrow[16])){
qryurl <-  row_to_url(reqrow)
jsndf <-  get_and_parse(qryurl)
newdf <-  add_row(newdf, jsndf, reqrow)
}
})
}
return(newdf)
}
#shortDatacomplete <- map_data(shortData)
completeData <- map_data(data)
countyFinder <- function(row){
address <- row[1]
city <- row[2]
state <- row[3]
url <- paste0("https://maps.googleapis.com/maps/api/geocode/json?address=", address, ",+",
city, ",+", state, "AIzaSyAXPpmvwhZuUpS1kBScwk7hPrqv-Grxbwc")
raw_json <- readLines(url)
# turn the json into a nice list
info <- fromJSON(raw_json)
# Get the first element of from the results list, and then the first componenent of address component
components <- info["results"][[1]][["address_components"]][[1]]
# Check component is not null
if(!is.null(components)){
# Check each elelement in address component to find the one that is listed as "administrative_area_level_2"
# This component will give us the county name for a given request
for (i in 1:nrow(components)){
if (str_detect(components[i,]["types"], "administrative_area_level_2")){
return(unlist(components[i,][["long_name"]]))
}
}
}
}
importantCols <- dplyr::select(data, streetaddress, city, state)
counties <- apply(importantCols, 1, countyFinder)
countyFinder <- function(row){
address <- row[1]
city <- row[2]
state <- row[3]
url <- paste0("https://maps.googleapis.com/maps/api/geocode/json?address=", address, ",+",
city, ",+", state, "AIzaSyAXPpmvwhZuUpS1kBScwk7hPrqv-Grxbwc")
raw_json <- readLines(url)
# turn the json into a nice list
info <- fromJSON(raw_json)
# Get the first element of from the results list, and then the first componenent of address component
components <- info["results"][[1]][["address_components"]][[1]]
# Check component is not null
if(!is.null(components)){
# Check each elelement in address component to find the one that is listed as "administrative_area_level_2"
# This component will give us the county name for a given request
for (i in 1:nrow(components)){
if (str_detect(components[i,]["types"], "administrative_area_level_2")){
return(unlist(components[i,][["long_name"]]))
}
}
}
}
importantCols <- dplyr::select(data, streetaddress, city, state)
counties <- apply(importantCols, 1, countyFinder)
shiny::runApp('R/STOR390/project_repo')
shiny::runApp('R/STOR390/project_repo')
shiny::runApp('R/STOR390/project_repo')
